{"version":3,"sources":["components/SearchCity.js","components/Title.js","components/ViewWeather.js","App.js","serviceWorker.js","index.js"],"names":["SearchCity","props","className","onSubmit","getWeather","onChange","getCity","type","value","name","placeholder","Title","today","format","Date","locale","pl","time","day","ViewWeather","result","weather","city","longitude","latitude","temp","temp_max","temp_min","humidity","pressure","clouds","wind","rain","error","Math","round","App","state","id","loading","e","setState","target","a","preventDefault","axios","get","params","q","appid","units","lang","response","console","log","data","coord","lat","lon","main","speed","all","undefined","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bcdb605c.chunk.js","sourcesContent":["/* Stworzyć w apce reacta komponent SearchCity, który zawiera:\ninput tekstowy do wpisania nazwy miasta\nButton do obsługi zapytania axiosa z wpisaną przez użytkownika nazwą miasta\n*/\n\nimport React from 'react';\n\n\nconst SearchCity = (props) => {\n\n        return (\n            <div className=\"container\">\n                <form className=\"form-inline\"\n                 onSubmit={props.getWeather} >\n                    <div className=\"input-field\">\n                        <input \n                        onChange={props.getCity}\n                        type=\"text\" \n                        value={props.value} \n                        name=\"city\" placeholder=\"Miasto...\"/>\n                    </div>\n                    <button className=\"btn btn-info\"\n                    >sprawdź pogodę</button>\n                </form>\n            </div>\n        );\n    }\n\nexport default SearchCity;","import React from 'react';\nimport '../App.css';\nimport {format} from 'date-fns';\nimport {pl} from 'date-fns/locale';\n\nconst Title = () => {\n        const today = format(new Date(), \"EEEE, dd MMMM yyyy\", {locale: pl});\n        const time = format(new Date(), \"p\", {locale: pl});\n        const day = format(new Date(), \"DDD 'dzień w roku'\", {locale: pl});\n        return (\n            <div className=\"title\">\n                <h1 className=\"title-container\">Aplikacja pogodowa</h1>\n                <div className=\"date\"> \n                    <h4 className=\"title-container__subtitle\">{today} </h4>\n                    <h4 className=\"time\">{time}</h4>\n                    <h4>{day}</h4>\n                </div>\n            </div>\n        );\n};\n\nexport default Title;","/* \nStworzyć w apce react komponent ViewWeather, który zawiera informacje o:\nNazwie miasta, dla którego jest wyświetlana pogoda\nPołożeniu geolokapzacyjnym miasta (latitude, longitude)\nAktualnej temperaturze w danej chwip\nZakresie temperatur z danego dnia\nAktualnej wilgotności oraz ciśnieniu atmosferycznym\nAktualnych opadach oraz wietrze\n*/\n\nimport React from 'react';\n\nconst ViewWeather = props => {\n        \n    let result;\n    const {city, longitude, latitude, temp, temp_max, temp_min, humidity, pressure, \n    clouds, wind, rain, error, value} = props.weather;\n\n        if (!error && value) {\n            result = \n        (<div className=\"weather\">\n            <p className=\"city\">\n                <span> {city} </span>\n                <span className=\"geo\"> Geo:  {longitude}, {latitude}</span>  \n            </p>\n            <p className=\"temp\">\n                <span>Temp: {Math.round(temp)} °C </span>\n                <span>Min: {Math.round(temp_min)} °C </span>\n                <span>Max: {Math.round(temp_max)} °C </span>\n            </p>\n            <p>Wilgotność: {humidity} %</p>\n            <p>Ciśnienie: {pressure} hPa</p>\n            <p>Zachmurzenie: {clouds} %</p>\n            <p>Wiatr: {wind} m/s</p>\n            <p>Opady: {rain}</p>\n        </div>)\n        }\n\n      else {\n           result = ( \n            <div className=\"error\">\n            <em>{error}</em>\n            </div>\n           )\n       }\n    return (\n        <div className=\"result\">\n         {error ? `błędne miasto: ${value}` : result}\n        </div>\n    );\n  }\n\nexport default ViewWeather;","import React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport SearchCity from './components/SearchCity';\nimport Title from './components/Title';\nimport ViewWeather from './components/ViewWeather';\n\n\nclass App extends React.Component {\n  \n  state = {\n    value: '',\n    city: '',\n    latitude: '',\n    longitude: '',\n    temp: '',\n    temp_max: '',\n    temp_min: '',\n    rain: '',\n    humidity: '',\n    pressure: '',\n    wind: '',\n    id: '',\n    clouds: '',\n    error: '',\n    loading: ''\n  }\n\n  getCity = (e) => {\n    this.setState({\n      value: e.target.value\n    })\n  }\n\n  getWeather = async (e) => {\n      e.preventDefault()\n      \n      const value = this.state.value\n            //const city = e.target.elements.city.value;\n            try {\n                if (value)  {\n                 const response = await axios.get('https://api.openweathermap.org/data/2.5/weather', {\n                  params: {\n                    q:`${value}`,\n                    appid: '05508bb378ad891b493b0c886cca7a57',\n                    units: 'metric',\n                    lang: 'pl'\n                }\n            })\n                  console.log(response);\n                      this.setState({\n                        city: response.data.name,\n                        latitude: response.data.coord.lat,\n                        longitude: response.data.coord.lon,\n                        temp: response.data.main.temp,\n                        temp_max: response.data.main.temp_max,\n                        temp_min: response.data.main.temp_min,\n                        rain: response.data.weather[0].main,\n                        humidity: response.data.main.humidity,\n                        pressure: response.data.main.pressure,\n                        wind: response.data.wind.speed,\n                        id: response.data.weather[0].id,\n                        clouds: response.data.clouds.all,\n                        error: false,\n                        loading: true \n                    })\n              }\n          \n            else {\n                    this.setState({\n                    city: undefined,\n                    latitude: undefined,\n                    longitude: undefined,\n                    temp: undefined,\n                    temp_max: undefined,\n                    temp_min: undefined,\n                    rain: undefined,\n                    humidity: undefined,\n                    pressure: undefined,\n                    wind: undefined,\n                    id: undefined,\n                    clouds: undefined,\n                    error: true,\n                    loading: false\n            })\n          }\n          }\n          catch (error) {\n            console.log(error)\n            this.setState({\n              error: true,\n              city: this.state.value\n            })\n          }\n  }\n  \n  render() {\n    return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-xs-7 title\">\n            <Title />\n          </div>\n          <div className=\"col-xs-4 weather\">\n            <SearchCity \n            value = {this.state.value} \n            getWeather = {this.getWeather}\n            getCity = {this.getCity}  \n            />\n            <ViewWeather \n              weather = {this.state}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n    );\n  }\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
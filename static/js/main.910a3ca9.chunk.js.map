{"version":3,"sources":["components/Title.js","components/SearchCity.js","components/ViewWeather.js","App.js","serviceWorker.js","index.js"],"names":["Title","today","format","Date","locale","pl","time","day","className","React","Component","SearchCity","onSubmit","this","props","getWeather","type","name","placeholder","ViewWeather","e","a","preventDefault","city","target","elements","value","country","axios","get","params","q","appid","units","lang","response","console","log","setState","data","sys","latitude","coord","lat","longitude","lon","temp","main","temp_max","temp_min","rain","weather","humidity","pressure","wind","speed","id","clouds","all","error","loading","undefined","state","result","Math","round","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.910a3ca9.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\nimport {format} from 'date-fns';\nimport {pl} from 'date-fns/locale';\n\nclass Title extends React.Component {\n    render() {\n        const today = format(new Date(), \"EEEE, dd MMMM yyyy\", {locale: pl});\n        const time = format(new Date(), \"p\", {locale: pl});\n        const day = format(new Date(), \"DDD 'dzień w roku'\", {locale: pl});\n        return (\n            <div className=\"title\">\n                <h1 className=\"title-container\">Aplikacja pogodowa</h1>\n                <div className=\"date\"> \n                    <h4 className=\"title-container__subtitle\">{today} </h4>\n                    <h4 className=\"time\">{time}</h4>\n                    <h4>{day}</h4>\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default Title;","/* Stworzyć w apce reacta komponent SearchCity, który zawiera:\ninput tekstowy do wpisania nazwy miasta\nButton do obsługi zapytania axiosa z wpisaną przez użytkownika nazwą miasta\n*/\n\nimport React from 'react';\n\nclass SearchCity extends React.Component {\n    render() {\n        return (\n            <div className=\"container\">\n                <form className=\"form-inline\" onSubmit={this.props.getWeather} >\n                    <input className=\"form-control mb-2 mr-sm-2\" type=\"text\" name=\"city\" placeholder=\"Miasto...\"/>\n                    <input className=\"form-control mb-2 mr-sm-2\" type=\"text\" name=\"country\" placeholder=\"Kraj...\"/>\n                    <button className=\"btn btn-info\">sprawdź pogodę</button>\n                </form>\n            </div>\n        );\n    }\n};\n\nexport default SearchCity;","/* \nStworzyć w apce react komponent ViewWeather, który zawiera informacje o:\nNazwie miasta, dla którego jest wyświetlana pogoda\nPołożeniu geolokapzacyjnym miasta (latitude, longitude)\nAktualnej temperaturze w danej chwip\nZakresie temperatur z danego dnia\nAktualnej wilgotności oraz ciśnieniu atmosferycznym\nAktualnych opadach oraz wietrze\n*/\n\nimport React from 'react';\nimport axios from 'axios';\nimport SearchCity from './SearchCity';\n\n\nclass ViewWeather extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            city: '',\n            country: '',\n            latitude: '',\n            longitude: '',\n            temp: '',\n            rain: '',\n            pressure: '',\n            temp_max: '',\n            temp_min: '',\n            humidity: '',\n            wind: '',\n            id: '',\n            clouds: '',\n            error: '',\n            loading: false\n        }\n    }\n\n    getWeather = async (e) => {\n        e.preventDefault();\n       // const { city, country, apiID, units } = this.props;\n        const city = e.target.elements.city.value;\n        const country = e.target.elements.country.value;\n        const apiID = '05508bb378ad891b493b0c886cca7a57'\n        try {\n            if (country && city)  {\n             const response = await\n        axios.get('http://api.openweathermap.org/data/2.5/weather', {\n            params: {\n                q:`${city},${country}`,\n                appid: `${apiID}`,\n                units: 'metric',\n                lang: 'pl'\n            }\n            \n        })\n        console.log(response);\n           this.setState({\n                city: response.data.name,\n                country: response.data.sys.country,\n                latitude: response.data.coord.lat,\n                longitude: response.data.coord.lon,\n                temp: response.data.main.temp,\n                temp_max: response.data.main.temp_max,\n                temp_min: response.data.main.temp_min,\n                rain: response.data.weather[0].main,\n                humidity: response.data.main.humidity,\n                pressure: response.data.main.pressure,\n                wind: response.data.wind.speed,\n                id: response.data.weather[0].id,\n                clouds: response.data.clouds.all,\n                error: '',\n                loading: true\n            })\n        }\n        else {\n                this.setState({\n                city: undefined,\n                country: undefined,\n                latitude: undefined,\n                longitude: undefined,\n                temp: undefined,\n                temp_max: undefined,\n                temp_min: undefined,\n                rain: undefined,\n                humidity: undefined,\n                pressure: undefined,\n                wind: undefined,\n                id: undefined,\n                clouds: undefined,\n                error: 'Podaj prawidłowe miasto i kraj, np: - Miasto: Poznan, Kraj: PL -',\n                loading: false\n        })\n    }\n} catch (error) {\n        console.log(error);\n    }\n}\n\n    render() {\n        let result;\n        //let load = (<h4>Loading</h4>)\n        //let icon;\n        if (this.state.error !== undefined && this.state.country && this.state.city) {\n            result = \n            (<div className=\"weather\">\n                <p className=\"city\">\n                    <span> {this.state.city}, {this.state.country} </span>\n                    <span className=\"geo\"> Geo:  {this.state.longitude}, {this.state.latitude}</span>  \n                </p>\n                <p className=\"temp\">\n                    <span>Temp: {Math.round(this.state.temp)} °C </span>\n                    <span>Min: {Math.round(this.state.temp_min)} °C </span>\n                    <span>Max: {Math.round(this.state.temp_max)} °C </span>\n                </p>\n                <p>Wilgotność: {this.state.humidity} %</p>\n                <p>Ciśnienie: {this.state.pressure} hPa</p>\n                <p>Zachmurzenie: {this.state.clouds} %</p>\n                <p>Wiatr: {this.state.wind} m/s</p>\n                <p>Opady: {this.state.rain}</p>\n            </div>)\n           // (!({this.state.id >699 && this.state.id < 800}) && !({this.state.id > 899 & this.state.id < 1000}))\n        }\n        else {\n            result = <div className=\"error\">\n                <em>{this.state.error}</em>\n            </div>\n        }\n\n        return (\n            <div className=\"result\">\n            <SearchCity getWeather={this.getWeather} />\n            {result}\n            </div>\n        );\n    }\n}\n\nexport default ViewWeather;","import React from 'react';\nimport './App.css';\nimport Title from './components/Title';\nimport ViewWeather from './components/ViewWeather';\n\n\nclass App extends React.Component {\n  \n  render() {\n    return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-xs-7 title\">\n            <Title />\n          </div>\n          <div className=\"col-xs-4 weather\">\n            <ViewWeather />\n          </div>\n        </div>\n      </div>\n    </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}